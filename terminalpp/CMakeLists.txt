# terminalpp application configuration file
#
# This is the configuration file for the `terminalpp` application, which is responsible for building the terminal on supported platforms and renderers (see below).
#
# Supported options:
#
# -DRENDERER=(QT | NATIVE)
#
# Selects the renderer which should be built. By default, the NATIVE renderer is used on Windows and Linux, while the QT renderer is used on MacOS where no native renderer exists. 

cmake_minimum_required (VERSION 3.5)

project(terminalpp VERSION ${TPP_VERSION})

set(TPP_SUMMARY "Cross-platform terminal emulator.")
set(TPP_DESCRIPTION "terminalpp is a minimalist but powerfull terminal emulator which provides the same features and user experience on both Windows, Linux and macOS.")

# the list of libraries to link the executable with
set(TPP_LINK_LIBRARIES libui libuiterminal)

# Default renderer selection
#
# If the renderer is not explicitly provided, the default renderer for given platform is selected and passed to the code as RENDERER macro. 
if(NOT DEFINED RENDERER)
    if(ARCH_MACOS)
        set(RENDERER QT)
    else()
        set(RENDERER NATIVE)
    endif()
endif()
add_definitions(-DRENDERER_${RENDERER})
if(RENDERER STREQUAL NATIVE)
    set(RENDERER_NATIVE true)
elseif(RENDERER STREQUAL QT)
    set(RENDERER_QT true)
# Only NATIVE and QT renderers are supported
else()
    message(FATAL_ERROR "Unknown renderer ${RENDERER}")
endif()

message(STATUS "Terminalpp will use the following renderer: ${RENDERER}")

# Renderer Configuration
#
# The native renderer not supported on macOS. On Linux, the X11, Freetype and xft libraries must be found. No extra setup is required for Windows.  
if(RENDERER STREQUAL NATIVE) 
    if(ARCH_MACOS)
        message(FATAL_ERROR "Native renderer not supported on macOS")
    elseif(ARCH_UNIX)
        find_package(X11 REQUIRED)
        find_package(Freetype REQUIRED)
        include_directories(${X11_INCLUDE_DIR})
        include_directories(${FREETYPE_INCLUDE_DIRS})
        if (NOT X11_Xft_FOUND)
            message(FATAL_ERROR "xft not found - please install libxft-dev")
        endif()
        # link with the required libraries
        list(APPEND TPP_LINK_LIBRARIES ${X11_LIBRARIES} ${X11_Xft_LIB} ${FREETYPE_LIBRARIES} fontconfig)
    endif()
# For the QT renderer, the Qt Installation must be found. This works out of the box on Linux, but Windows and macOS need some extra information. For windows, the version 5.14.1 and location C:\Qt is hardcoded, which macOS assumes that Qt was installed using brew. 
# On Windows shared QT libraries must be deployed together with the executable so the windeployqt exacutable must be found. 
elseif(RENDERER STREQUAL QT)
    if(ARCH_WINDOWS)
        set(CMAKE_PREFIX_PATH "C:\\Qt\\5.14.1\\msvc2017_64")
        message(STATUS "Qt will be looked for in c:\\Qt\\5.14.1\\msvc2017_64")
    elseif(ARCH_MACOS)
        set(CMAKE_PREFIX_PATH "/usr/local/opt/qt")
        message(STATUS "Qt will be looked for in /usr/local/opt/qt")
    endif()
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTORCC ON)
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    set_property(SOURCE build_stamp.h PROPERTY SKIP_AUTOMOC ON)
    find_package(Qt5Widgets REQUIRED)
    if(ARCH_WINDOWS)
        # finds the windeployqt executable so that the binaries can be added
        find_program(WINDEPLOYQT_EXECUTABLE windeployqt HINTS "${_qt_bin_dir}")
    elseif(ARCH_MACOS)
        find_program(MACDEPLOYQT_EXECUTABLE macdeployqt HINTS "${_qt_bin_dir}")
    endif()
    # link with the QT libraries
    list(APPEND TPP_LINK_LIBRARIES Qt5::Widgets)
endif()

# Extra Dependencies Configuration
#
# On Unix platforms, the pthreads library must be present. No extra steps are required for Windows. 
if(ARCH_UNIX)
    find_package(Threads REQUIRED)
    list(APPEND TPP_LINK_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
    if(NOT ARCH_MACOS)
        list(APPEND TPP_LINK_LIBRARIES stdc++fs)
    endif()
endif()

# The terminalpp executable
#
# First, determine the terminalpp sources, which lie in this directory and the autogenerated stamp header file in the root directory. 
file(GLOB_RECURSE SRC "*.cpp" "*.h" "${CMAKE_SOURCE_DIR}/build_stamp.h")

# Creates the executable. On Windows, the WIN32 GUI app has to be selected and the resources description must be added to the sources. On UNIX, the executable is straightforward. 
if(ARCH_WINDOWS AND RENDERER_NATIVE)
    add_executable(terminalpp WIN32 ${SRC} "directwrite/terminalpp.rc")
elseif(ARCH_WINDOWS AND RENDERER_QT)
    add_executable(terminalpp WIN32 ${SRC} "qt/terminalpp.qrc")
    # add QT dlls to the executable
    add_custom_command(TARGET terminalpp POST_BUILD
        COMMAND ${WINDEPLOYQT_EXECUTABLE} "$<TARGET_FILE:terminalpp>"
    )
elseif(ARCH_MACOS)
    # use custom plist file
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/packages/macOS/Info.plist ${CMAKE_BINARY_DIR}/packages/macOS/Info.plist @ONLY)
    # we can't target older versions because of the usage of std::filesystem
    set(CMAKE_OSX_DEPLOYMENT_TARGET 10.15)
    add_executable(terminalpp MACOSX_BUNDLE ${SRC} "qt/terminalpp.qrc" "${CMAKE_SOURCE_DIR}/resources/icons/bundle.icns")
    set_target_properties(
        terminalpp
        PROPERTIES
        RESOURCE "${CMAKE_SOURCE_DIR}/resources/icons/bundle.icns"
        MACOSX_BUNDLE_INFO_PLIST "${CMAKE_BINARY_DIR}/packages/macOS/Info.plist"
    )
    add_custom_command(TARGET terminalpp POST_BUILD
        COMMAND ${MACDEPLOYQT_EXECUTABLE} terminalpp.app
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    )
elseif(ARCH_UNIX AND RENDERER_NATIVE)
    add_executable(terminalpp ${SRC})
elseif(ARCH_UNIX AND RENDERER_QT)
    add_executable(terminalpp ${SRC} "qt/terminalpp.qrc")
endif()

# On all platforms, terminalpp links against the ui and terminal libraries from the root folder.
target_link_libraries(terminalpp ${TPP_LINK_LIBRARIES})
add_dependencies(terminalpp stamp)

if(PACKAGE_TERMINALPP)
    # cpack settings - generic
    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${TPP_SUMMARY})
    set(CPACK_PACKAGE_DESCRIPTION ${TPP_DESCRIPTION})
    # we need to propagate these to the parent scope *and* have them in the local scope because the snap target below might need it
    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${CPACK_PACKAGE_DESCRIPTION_SUMMARY}  PARENT_SCOPE)
    set(CPACK_PACKAGE_DESCRIPTION ${CPACK_PACKAGE_DESCRIPTION}  PARENT_SCOPE)
endif()

# on windows, instead of cpack, the WIX toolset is used to produce the msi installer package. The package-msi target is defined here which runs WIX for terminalpp
if(PACKAGE_TERMINALPP AND PACKAGE_WIX AND RENDERER_NATIVE)
    # create the build directory and configure the WiX configuration in it
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/packages/msi/tpp.wxs ${CMAKE_BINARY_DIR}/packages/msi/tpp.wxs @ONLY)
    add_custom_target(package-msi
        COMMAND ${PACKAGE_WIX}/candle.exe
            -nologo 
            -arch "x64" 
            -ext WixUIExtension -ext WixUtilExtension 
            -out "tpp.wixobj" 
            "tpp.wxs"
        COMMAND ${PACKAGE_WIX}/light.exe 
            -nologo
            -ext WixUIExtension
            -ext WixUtilExtension 
            -out "../${PROJECT_NAME}.msi" 
            -sice:ICE61 -sice:ICE91 
            "tpp.wixobj"
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/packages/msi
        DEPENDS terminalpp
    )        
endif()

# Builds the snap package for linux
#
# The classic confinement is used as terminal with the strict confinement is most likely not what we want.
if (PACKAGE_TERMINALPP AND PACKAGE_SNAP AND RENDERER_NATIVE)
    # create the build directory and configure the snap configuration in it
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/packages/snap/tpp.yaml ${CMAKE_CURRENT_BINARY_DIR}/snap/snapcraft.yaml @ONLY)
    add_custom_target(package-snap-copy-tpp
        COMMAND rm -rf ${CMAKE_CURRENT_BINARY_DIR}/snap/source
        COMMAND mkdir ${CMAKE_CURRENT_BINARY_DIR}/snap/source
        COMMAND rsync -a . ${CMAKE_CURRENT_BINARY_DIR}/snap/source  --exclude-from=.gitignore
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    )
    set_target_properties(package-snap-copy-tpp PROPERTIES EXCLUDE_FROM_ALL TRUE)
    add_custom_target(package-snap
        COMMAND ${PACKAGE_SNAP} clean ${SNAP_EXTRA_ARGS}
        COMMAND ${PACKAGE_SNAP} ${SNAP_EXTRA_ARGS}
        COMMAND cp ${PROJECT_NAME}_${PROJECT_VERSION}_amd64.snap ${CMAKE_BINARY_DIR}/packages/${PROJECT_NAME}.snap
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/snap
        DEPENDS package-snap-copy-tpp
    )
endif()

if(PACKAGE_TERMINALPP AND ARCH_UNIX)
    if(ARCH_LINUX)
        configure_file(${CMAKE_SOURCE_DIR}/resources/terminalpp.desktop ${CMAKE_CURRENT_BINARY_DIR}/terminalpp.desktop @ONLY)
        install(FILES ${CMAKE_CURRENT_BINARY_DIR}/terminalpp.desktop DESTINATION share/applications)
        install(FILES ${CMAKE_SOURCE_DIR}/resources/icons/icon_48x48.png DESTINATION share/icons/hicolor/48x48 RENAME terminalpp.png)
    endif()
    install(TARGETS terminalpp DESTINATION bin COMPONENT terminalpp)
endif()

if(PACKAGE_TERMINALPP AND PACKAGE_DEB AND RENDERER_NATIVE)
    set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${CMAKE_CURRENT_SOURCE_DIR}/packages/deb/postinst;${CMAKE_CURRENT_SOURCE_DIR}/packages/deb/prerm" PARENT_SCOPE)
    set(CPACK_DEBIAN_PACKAGE_DEPENDS "libfontconfig1, libfreetype6, libpng16-16, libx11-6, libxau6, libxcb1, libxdmcp6, libxft2, libxrender1, x11-utils" PARENT_SCOPE)
    set(CPACK_PACKAGE_DEBIAN_SECTION "utils" PARENT_SCOPE)
endif()

if(PACKAGE_TERMINALPP AND PACKAGE_RPM AND RENDERER_NATIVE)
    set(CPACK_RPM_PACKAGE_REQUIRES "fontconfig, libfreetype6, libpng16-16, libX11-6, libXau6, libxcb1, libXdmcp6, libXft2, libXrender1, xmessage" PARENT_SCOPE)
endif()

if(PACKAGE_TERMINALPP AND PACKAGE_APPBUNDLE)
    add_custom_target(package-appbundle
        COMMAND mkdir -p ${CMAKE_BINARY_DIR}/packages
        COMMAND zip -FSr ${CMAKE_BINARY_DIR}/packages/terminalpp.zip terminalpp.app
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        DEPENDS terminalpp
    )
endif()
