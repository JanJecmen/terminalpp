name: packages

on:
  push:
    branch:
    - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ROOT: /mnt/c/Users/peta/actions-runner/_work/terminalpp/terminalpp

jobs:
  # Builds the packages on Windows
  #
  windows-terminalpp:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - name: build
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build . --clean-first --config Release --target packages
    - name: artifact-terminalpp-msi
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.msi
        path: build/packages/terminalpp.msi
    - name: terminalpp-msix-sign
      run: |
          $pfxPassword = "${{ secrets.TERMINALPP_CERT_PASSWORD }}"
          $pfx = [Convert]::FromBase64String("${{ secrets. TERMINALPP_CERT }}")
          [IO.File]::WriteAllBytes("terminalpp-cert.pfx", $pfx)          
          SignTool sign /fd SHA256 /a /f terminalpp-cert.pfx /p $pfxPassword build/packages/terminalpp.msix
    - name: artifact-terminalpp-msix
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.msix
        path: build/packages/terminalpp.msix

  # Source and Binary packages for Linux 
  #
  linux-deb-rpm:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: install-packages
      run: |
        bash scripts/setup-linux.sh
    - name: build
      run: |
        mkdir -p build
        cd build
        sudo cmake .. -DCMAKE_BUILD_TYPE=release
        sudo cmake --build . --target packages
    - name: artifact-terminalpp-deb
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.deb
        path: build/packages/terminalpp.deb
    - name: artifact-terminalpp-rpm
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.rpm
        path: build/packages/terminalpp.rpm
    - name: artifact-terminalpp-src-rpm
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.src.rpm
        path: build/packages/terminalpp.src.rpm
    - name: artifact-ropen-deb
      uses: actions/upload-artifact@master
      with:
        name: ropen.deb
        path: build/packages/ropen.deb
    - name: artifact-ropen-rpm
      uses: actions/upload-artifact@master
      with:
        name: ropen.rpm
        path: build/packages/ropen.rpm
    - name: artifact-ropen-src-rpm
      uses: actions/upload-artifact@master
      with:
        name: ropen.src.rpm
        path: build/packages/ropen.src.rpm

  linux-terminalpp-snap:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: install-snapcraft
      run: |
        sudo snap install snapcraft --classic
    - name: install-packages
      run: |
        sudo apt install cmake libx11-dev libxft-dev g++
    - name: build
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8 -DSNAP_EXTRA_ARGS=--destructive-mode -DINSTALL=terminalpp
        cmake --build . --target terminalpp-snap
    - name: artifact-terminalpp-snap
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.snap
        path: build/packages/terminalpp.snap

  macos-terminalpp:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: install-packages
      run: |
        bash scripts/setup-macos.sh
    - name: build-terminalpp
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --target packages
    - name: artifact-terminalpp-zip
      uses: actions/upload-artifact@master
      with:
        name: terminalpp-macos.zip
        path: build/packages/terminalpp.zip

  linux-ropen-snap:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: install-snapcraft
      run: |
        sudo snap install snapcraft --classic
    - name: install-packages
      run: |
        sudo apt install cmake libx11-dev libxft-dev g++
    - name: build
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8 -DSNAP_EXTRA_ARGS=--destructive-mode -DINSTALL=ropen
        cmake --build . --target ropen-snap
    - name: artifact-ropen-snap
      uses: actions/upload-artifact@master
      with:
        name: ropen.snap
        path: build/packages/ropen.snap
  
  wsl-tpp-bypass:
    runs-on: [self-hosted, windows]
    steps:
    - uses: actions/checkout@v2
    - name: check-wsl
      run: |
        wsl.exe --list
      shell: powershell
    # Ubuntu 18.04
    - name: build-bypass-ubuntu-18.04
      run: |
        wsl.exe -d Ubuntu bash -c "cd ${{ env.ROOT }} && bash scripts/build-bypass.sh ubuntu-18-04"
    - name: artifact-tpp-bypass-ubuntu-18.04
      uses: actions/upload-artifact@master
      with:
        name: tpp-bypass-ubuntu-18.04
        path: build-ubuntu-18-04/tpp-bypass/tpp-bypass
    # bypass - Ubuntu 20.04
    - name: build-bypass-ubuntu-20.04
      run: |
        wsl.exe -d Ubuntu-20.04 bash -c "cd ${{ env.ROOT }} && bash scripts/build-bypass.sh ubuntu-20-04"
    - name: artifact-tpp-bypass-ubuntu-20.04
      uses: actions/upload-artifact@master
      with:
        name: tpp-bypass-ubuntu-20.04
        path: build-ubuntu-20-04/tpp-bypass/tpp-bypass
    # Debian
    - name: build-bypass-debian
      run: |
        wsl.exe -d Debian bash -c "cd ${{ env.ROOT }} && bash scripts/build-bypass.sh debian"
    - name: artifact-tpp-bypass-debian
      uses: actions/upload-artifact@master
      with:
        name: tpp-bypass-debian
        path: build-Debian/tpp-bypass/tpp-bypass
    # openSUSE-Leap
    - name: build-bypass-suse-Leap-15-1
      run: |
        wsl.exe -d openSUSE-Leap-15-1 bash -c "cd ${{ env.ROOT }} && bash scripts/build-bypass.sh leap-15-1"
    - name: artifact-tpp-bypass-openSUSE-Leap-15-1
      uses: actions/upload-artifact@master
      with:
        name: tpp-bypass-openSUSE-Leap-15-1
        path: build-leap-15-1/tpp-bypass/tpp-bypass

# Create the github release
#
# Creates a release draft, uploads the artifacts. 
  create-release:
    if: ${{ github.ref == 'refs/heads/release' }}
    runs-on: ubuntu-20.04
    needs: [windows-terminalpp, linux-deb-rpm, linux-terminalpp-snap, linux-ropen-snap, macos-terminalpp, wsl-tpp-bypass]
    steps:
    - uses: actions/checkout@v2
    # download terminalpp windows installers
    - name: get-terminalpp-msi
      uses: actions/download-artifact@v1
      with:
        name: terminalpp.msi
    - name: get-terminalpp-msix
      uses: actions/download-artifact@v1
      with:
        name: terminalpp.msix
    # download terminalpp linux binary packages
    - name: get-terminalpp-deb
      uses: actions/download-artifact@v1
      with:
        name: terminalpp.deb
    - name: get-terminalpp-rpm
      uses: actions/download-artifact@v1
      with:
        name: terminalpp.rpm
    - name: get-terminalpp-snap
      uses: actions/download-artifact@v1
      with:
        name: terminalpp.snap
    # download terminalpp source packages
    - name: get-terminalpp-src.rpm
      uses: actions/download-artifact@v1
      with:
        name: terminalpp.src.rpm
    # download macOS bundle
    - name: get-terminalpp-macos-zip
      uses: actions/download-artifact@v1
      with:
        name: terminalpp-macos.zip
    # download ropen linux binary packages
    - name: get-ropen-deb
      uses: actions/download-artifact@v1
      with:
        name: ropen.deb
    - name: get-ropen-rpm
      uses: actions/download-artifact@v1
      with:
        name: ropen.rpm
    - name: get-ropen-snap
      uses: actions/download-artifact@v1
      with:
        name: ropen.snap
    # download ropen source packages
    - name: get-ropen-src-rpm
      uses: actions/download-artifact@v1
      with:
        name: ropen.src.rpm
    # download bypass for WSL distributions
    - name: get-bypass-ubuntu-18.04
      uses: actions/download-artifact@v1
      with:
        name: tpp-bypass-ubuntu-18.04
    - name: get-bypass-ubuntu-20.04
      uses: actions/download-artifact@v1
      with:
        name: tpp-bypass-ubuntu-20.04
    - name: get-bypass-debian
      uses: actions/download-artifact@v1
      with:
        name: tpp-bypass-debian
    - name: get-bypass-openSUSE-Leap-15-1
      uses: actions/download-artifact@v1
      with:
        name: tpp-bypass-openSUSE-Leap-15-1
    # now that we have all packages locally, create the release draft
    - name: create-release
      id: create-release
      uses: actions/create-release@v1
      with:
        tag_name: drafted
        release_name: drafted
        draft: true
        prerelease: false 
    # and upload the artifacts - first terminalpp windows
    - name: upload-terminalpp-msi
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./terminalpp.msi/terminalpp.msi
        asset_name: terminalpp.msi
        asset_content_type: application/octet-stream
    - name: upload-terminalpp-msix
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./terminalpp.msix/terminalpp.msix
        asset_name: terminalpp.msix
        asset_content_type: application/octet-stream
    # upload terminalpp linux binaries
    - name: upload-terminalpp-deb
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./terminalpp.deb/terminalpp.deb
        asset_name: terminalpp.deb
        asset_content_type: application/octet-stream
    - name: upload-terminalpp-rpm
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./terminalpp.rpm/terminalpp.rpm
        asset_name: terminalpp.rpm
        asset_content_type: application/octet-stream
    - name: upload-terminalpp-snap
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./terminalpp.snap/terminalpp.snap
        asset_name: terminalpp.snap
        asset_content_type: application/octet-stream
    # upload terminalpp linux source packages
    - name: upload-terminalpp-src-rpm
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./terminalpp.src.rpm/terminalpp.src.rpm
        asset_name: terminalpp.src.rpm
        asset_content_type: application/octet-stream
    # upload terminalpp macOS bundle
    - name: upload-terminalpp-macos-zip
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./terminalpp-macos.zip/terminalpp.zip
        asset_name: terminalpp-macos.zip
        asset_content_type: application/zip
    # upload ropen linux binaries
    - name: upload-ropen-deb
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./ropen.deb/ropen.deb
        asset_name: ropen.deb
        asset_content_type: application/octet-stream
    - name: upload-ropen-rpm
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./ropen.rpm/ropen.rpm
        asset_name: ropen.rpm
        asset_content_type: application/octet-stream
    - name: upload-ropen-snap
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./ropen.snap/ropen.snap
        asset_name: ropen.snap
        asset_content_type: application/octet-stream
    # upload ropen linux source packages
    - name: upload-ropen-src-rpm
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./ropen.src.rpm/ropen.src.rpm
        asset_name: ropen.src.rpm
        asset_content_type: application/octet-stream
    # upload bypass WSL binaries
    - name: upload-bypass-ubuntu-18.04
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./tpp-bypass-ubuntu-18.04/tpp-bypass
        asset_name: tpp-bypass-ubuntu-18.04
        asset_content_type: application/octet-stream
    - name: upload-bypass-ubuntu-20.04
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./tpp-bypass-ubuntu-20.04/tpp-bypass
        asset_name: tpp-bypass-ubuntu-20.04
        asset_content_type: application/octet-stream
    - name: upload-bypass-debian
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./tpp-bypass-debian/tpp-bypass
        asset_name: tpp-bypass-debian
        asset_content_type: application/octet-stream
    - name: upload-bypass-openSUSE-Leap-15-1
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./tpp-bypass-openSUSE-Leap-15-1/tpp-bypass
        asset_name: tpp-bypass-openSUSE-Leap-15-1
        asset_content_type: application/octet-stream

# Automated release to Windows Store
#
# This looks like a good start:
#
# https://docs.microsoft.com/en-us/windows/uwp/monetize/create-an-app-submission
# https://docs.microsoft.com/en-us/windows/uwp/monetize/csharp-code-examples-for-the-windows-store-submission-api
#
# on powreshell Invoke-RestMethod (curl)


# Release to snap store
# 
  release-snap-edge:
    if: ${{ github.ref == 'refs/heads/release' }}
    runs-on: ubuntu-20.04
    needs: [create-release]
    steps:
    - uses: actions/checkout@v2
    - name: install-snapcraft
      run: |
        sudo snap install snapcraft --classic
        echo "${{ secrets.SNAPCRAFT_EDGE }}" > snapcraft-edge-login
        snapcraft login --with snapcraft-edge-login
        rm snapcraft-edge-login
    # release terminalpp
    - name: get-terminalpp-snap
      uses: actions/download-artifact@v1
      with:
        name: terminalpp.snap
    - name: release-snap-terminalpp
      run: |
        snapcraft upload --release=edge terminalpp.snap/terminalpp.snap
    # release ropen
    - name: get-ropen-snap
      uses: actions/download-artifact@v1
      with:
        name: ropen.snap
    - name: release-snap-ropen
      run: |
        sudo snapcraft upload --release=edge ropen.snap/ropen.snap



