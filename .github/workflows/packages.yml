name: packages

on:
  push:
    branch:
    - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ROOT: /mnt/c/Users/peta/actions-runner/_work/terminalpp/terminalpp

jobs:
  # Builds the packages on Windows
  #
  windows-terminalpp:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - name: build
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build . --clean-first --config Release --target packages
    - name: artifact-terminalpp-msi
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.msi
        path: build/packages/terminalpp.msi
    - name: terminalpp-msix-sign
      run: |
          $pfxPassword = "${{ secrets.TERMINALPP_CERT_PASSWORD }}"
          $pfx = [Convert]::FromBase64String("${{ secrets. TERMINALPP_CERT }}")
          [IO.File]::WriteAllBytes("terminalpp-cert.pfx", $pfx)          
          SignTool sign /fd SHA256 /a /f terminalpp-cert.pfx /p $pfxPassword build/packages/terminalpp.msix
    - name: artifact-terminalpp-msix
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.msix
        path: build/packages/terminalpp.msix

  # Source and Binary packages for Linux 
  #
  linux-deb:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: install-packages
      run: |
        bash scripts/setup-linux.sh
    - name: build
      run: |
        mkdir -p build
        cd build
        sudo cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8
        sudo cmake --build . --target packages
    - name: artifact-terminalpp-deb
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.deb
        path: build/packages/terminalpp.deb
    - name: artifact-ropen-deb
      uses: actions/upload-artifact@master
      with:
        name: ropen.deb
        path: build/packages/ropen.deb

  linux-terminalpp-snap:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: install-snapcraft
      run: |
        bash scripts/github-actions-install-snapcraft.sh 
    - name: install-packages
      run: |
        bash scripts/setup-linux.sh
    - name: build
      run: |
        mkdir -p build
        cd build
        sudo cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8 -DSNAP_EXTRA_ARGS=--use-lxd -DINSTALL=terminalpp
        sudo cmake --build . --target terminalpp-snap
    - name: artifact-terminalpp-snap
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.snap
        path: build/packages/terminalpp.snap

  macOS-terminalpp:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: install-packages
      run: |
        bash scripts/setup-macos.sh
    - name: build-terminalpp
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --target packages
    - name: artifact-terminalpp-zip
      uses: actions/upload-artifact@master
      with:
        name: terminalpp-macos.zip
        path: build/packages/terminalpp.zip

  linux-ropen-snap:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: install-snapcraft
      run: |
        bash scripts/github-actions-install-snapcraft.sh 
    - name: install-packages
      run: |
        bash scripts/setup-linux.sh
    - name: build
      run: |
        mkdir -p build
        cd build
        sudo cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8 -DSNAP_EXTRA_ARGS=--use-lxd -DINSTALL=ropen
        sudo cmake --build . --target ropen-snap
    - name: artifact-ropen-snap
      uses: actions/upload-artifact@master
      with:
        name: ropen.snap
        path: build/packages/ropen.snap
  
  wsl-tpp-bypass:
    runs-on: [self-hosted, windows]
    steps:
    - uses: actions/checkout@v2
    - name: check-wsl
      run: |
        wsl.exe --list
      shell: powershell
    # Ubuntu 18.04
    - name: build-bypass-ubuntu-18.04
      run: |
        wsl.exe -d Ubuntu bash -c "cd ${{ env.ROOT }} && bash scripts/build-bypass.sh ubuntu-18-04"
    - name: artifact-tpp-bypass-ubuntu-18.04
      uses: actions/upload-artifact@master
      with:
        name: tpp-bypass-ubuntu-18.04
        path: build-ubuntu-18-04/tpp-bypass/tpp-bypass
    # bypass - Ubuntu 20.04
    - name: build-bypass-ubuntu-20.04
      run: |
        wsl.exe -d Ubuntu-20.04 bash -c "cd ${{ env.ROOT }} && bash scripts/build-bypass.sh ubuntu-20-04"
    - name: artifact-tpp-bypass-ubuntu-20.04
      uses: actions/upload-artifact@master
      with:
        name: tpp-bypass-ubuntu-20.04
        path: build-ubuntu-20-04/tpp-bypass/tpp-bypass
    # Debian
    - name: build-bypass-debian
      run: |
        wsl.exe -d Debian bash -c "cd ${{ env.ROOT }} && bash scripts/build-bypass.sh debian"
    - name: artifact-tpp-bypass-debian
      uses: actions/upload-artifact@master
      with:
        name: tpp-bypass-debian
        path: build-Debian/tpp-bypass/tpp-bypass
    # openSUSE-Leap
    - name: build-bypass-suse-Leap-15-1
      run: |
        wsl.exe -d openSUSE-Leap-15-1 bash -c "cd ${{ env.ROOT }} && bash scripts/build-bypass.sh leap-15-1"
    - name: artifact-tpp-bypass-openSUSE-Leap-15-1
      uses: actions/upload-artifact@master
      with:
        name: tpp-bypass-openSUSE-Leap-15-1
        path: build-leap-15-1/tpp-bypass/tpp-bypass


#   macOS:
#     runs-on: macos-latest
#     steps:
#     - uses: actions/checkout@v2
#     - name: install-packages
#       run: |
#         bash scripts/setup-macos.sh
#     - name: build-terminalpp
#       run: |
#         mkdir -p build
#         cd build
#         cmake .. -DCMAKE_BUILD_TYPE=Release -DPACKAGE=terminalpp
#         cmake --build . --target packages
#         # build/packages/terminalpp.zip
#     - name: artifact-terminalpp-zip
#       uses: actions/upload-artifact@master
#       with:
#         name: terminalpp-macos.zip
#         path: build/packages/terminalpp.zip
#
#  linux-terminalpp-snap:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v2
#    - name: install-snapcraft
#      run: |
#        bash scripts/github-actions-install-snapcraft.sh 
#    - name: install-packages
#      run: |
#        bash scripts/setup-linux.sh
#    - name: build
#      run: |
#        mkdir -p build
#        cd build
#        sudo cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8 -DSNAP_EXTRA_ARGS=--use-lxd
#        sudo cmake --build . --target terminalpp-snap
#     - name: artifact-terminalpp-deb
#       uses: actions/upload-artifact@master
#       with:
#         name: terminalpp.deb
#         path: build/packages/terminalpp.deb
#     - name: artifact-terminalpp-rpm
#       uses: actions/upload-artifact@master
#       with:
#         name: terminalpp.rpm
#         path: build/packages/terminalpp.rpm
#    - name: artifact-terminalpp-snap
#      uses: actions/upload-artifact@master
#      with:
#        name: terminalpp.snap
#        path: build/packages/terminalpp.snap
#    - name: artifact-ropen-snap
#      uses: actions/upload-artifact@master
#      with:
#        name: ropen.snap
#        path: build/packages/ropen.snap
#     - name: build-ropen
#       run: |
#         cd build
#         sudo cmake .. -DPACKAGE=ropen
#         sudo cmake --build . --target packages
#     - name: artifact-ropen-deb
#       uses: actions/upload-artifact@master
#       with:
#         name: ropen.deb
#         path: build/packages/ropen.deb
#     - name: artifact-ropen-rpm
#       uses: actions/upload-artifact@master
#       with:
#         name: ropen.rpm
#         path: build/packages/ropen.rpm
#     - name: build-tpp-bypass
#       run: |
#         cd build
#         sudo cmake .. -DPACKAGE=tpp-bypass
#         sudo cmake --build . --target packages
#     - uses: actions/upload-artifact@master
#       with:
#         name: tpp-bypass.deb
#         path: build/packages/tpp-bypass.deb
#     - uses: actions/upload-artifact@master
#       with:
#         name: tpp-bypass.rpm
#         path: build/packages/tpp-bypass.rpm
