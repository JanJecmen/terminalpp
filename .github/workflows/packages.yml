name: packages

on:
  push:
    branches:
    - master
    - release
    
env:
  ROOT: /mnt/c/Users/peta/actions-runner/_work/terminalpp/terminalpp

jobs:
  # Builds the packages on Windows
  #
  windows-terminalpp:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - name: build
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build . --clean-first --config Release --target packages
    - name: artifact-terminalpp-msi
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.msi
        path: build/packages/terminalpp.msi
    - name: terminalpp-msix-sign
      run: |
          $pfxPassword = "${{ secrets.TERMINALPP_CERT_PASSWORD }}"
          $pfx = [Convert]::FromBase64String("${{ secrets.TERMINALPP_CERT }}")
          [IO.File]::WriteAllBytes("terminalpp-cert.pfx", $pfx)          
          SignTool sign /fd SHA256 /a /f terminalpp-cert.pfx /p $pfxPassword build/packages/terminalpp.msix
    - name: artifact-terminalpp-msix
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.msix
        path: build/packages/terminalpp.msix

  # Source and Binary packages for Linux 
  #
  linux-deb-rpm:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: install-packages
      run: |
        bash scripts/setup-linux.sh
    - name: build
      run: |
        mkdir -p build
        cd build
        sudo cmake .. -DCMAKE_BUILD_TYPE=release
        sudo cmake --build . --target packages
    - name: artifact-terminalpp-deb
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.deb
        path: build/packages/terminalpp.deb
    - name: artifact-terminalpp-rpm
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.rpm
        path: build/packages/terminalpp.rpm
    - name: artifact-terminalpp-src-rpm
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.src.rpm
        path: build/packages/terminalpp.src.rpm
    - name: artifact-ropen-deb
      uses: actions/upload-artifact@master
      with:
        name: ropen.deb
        path: build/packages/ropen.deb
    - name: artifact-ropen-rpm
      uses: actions/upload-artifact@master
      with:
        name: ropen.rpm
        path: build/packages/ropen.rpm
    - name: artifact-ropen-src-rpm
      uses: actions/upload-artifact@master
      with:
        name: ropen.src.rpm
        path: build/packages/ropen.src.rpm

  linux-tpp-bypass:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: install-packages
      run: |
        sudo apt install cmake g++-10
    - name: build
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 -DRENDERER=NONE -DCMAKE_BUILD_TYPE=release
        cmake --build . --target tpp-bypass-source
    - name: artifact-tpp-bypass-source
      uses: actions/upload-artifact@master
      with:
        name: tpp-bypass-source
        path: build/packages/tpp-bypass/tpp-bypass-source
    - name: build-tpp-bypass
      run: |
        cd build/packages/tpp-bypass/tpp-bypass-source
        bash install.sh
    - name: artifact-tpp-bypass
      uses: actions/upload-artifact@master
      with:
        name: tpp-bypass
        path: ~/.local/bin/tpp-bypass

  linux-terminalpp-snap:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: install-snapcraft
      run: |
        sudo snap install snapcraft --classic
        echo "${{ secrets.SNAPCRAFT }}" > snapcraft-credentials
        snapcraft login --with snapcraft-credentials
        rm snapcraft-credentials
    - name: install-packages
      run: |
        sudo apt install cmake libx11-dev libxft-dev libxcursor-dev g++
    - name: build
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 -DSNAP_EXTRA_ARGS=--destructive-mode -DINSTALL=terminalpp
        cmake --build . --target terminalpp-snap
    - name: artifact-terminalpp-snap
      uses: actions/upload-artifact@master
      with:
        name: terminalpp.snap
        path: build/packages/terminalpp.snap

  macos-terminalpp:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: install-packages
      run: |
        bash scripts/setup-macos.sh
    - name: build-terminalpp
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --target packages
    - name: artifact-terminalpp-zip
      uses: actions/upload-artifact@master
      with:
        name: terminalpp-macos.zip
        path: build/packages/terminalpp.zip

  linux-ropen-snap:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: install-snapcraft
      run: |
        sudo snap install snapcraft --classic
    - name: install-packages
      run: |
        sudo apt install cmake libx11-dev libxft-dev libxcursor-dev g++-10
    - name: build
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 -DSNAP_EXTRA_ARGS=--destructive-mode -DINSTALL=ropen
        cmake --build . --target ropen-snap
    - name: artifact-ropen-snap
      uses: actions/upload-artifact@master
      with:
        name: ropen.snap
        path: build/packages/ropen.snap

# Create the github release
#
# Creates a release draft, uploads the artifacts. 
  create-release:
    if: ${{ github.ref == 'refs/heads/release' }}
    runs-on: ubuntu-20.04
    needs: [windows-terminalpp, linux-deb-rpm, linux-terminalpp-snap, linux-ropen-snap, macos-terminalpp, linux-tpp-bypass]
    steps:
    - uses: actions/checkout@v2
    - name: install-packages
      run: |
        sudo apt install zip
    # download terminalpp windows installers
    - name: get-artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    # now that we have all packages locally, create the release draft
    - name: create-release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        tag_name: drafted
        release_name: drafted
        draft: true
        prerelease: false 
    # and upload the artifacts - first terminalpp windows
    - name: upload-terminalpp-msi
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/terminalpp.msi/terminalpp.msi
        asset_name: terminalpp.msi
        asset_content_type: application/octet-stream
    - name: upload-terminalpp-msix
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/terminalpp.msix/terminalpp.msix
        asset_name: terminalpp.msix
        asset_content_type: application/octet-stream
    # upload terminalpp linux binaries
    - name: upload-terminalpp-deb
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/terminalpp.deb/terminalpp.deb
        asset_name: terminalpp.deb
        asset_content_type: application/octet-stream
    - name: upload-terminalpp-rpm
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/terminalpp.rpm/terminalpp.rpm
        asset_name: terminalpp.rpm
        asset_content_type: application/octet-stream
    - name: upload-terminalpp-snap
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/terminalpp.snap/terminalpp.snap
        asset_name: terminalpp.snap
        asset_content_type: application/octet-stream
    # upload terminalpp linux source packages
    - name: upload-terminalpp-src-rpm
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/terminalpp.src.rpm/terminalpp.src.rpm
        asset_name: terminalpp.src.rpm
        asset_content_type: application/octet-stream
    # upload terminalpp macOS bundle
    - name: upload-terminalpp-macos-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/terminalpp-macos.zip/terminalpp.zip
        asset_name: terminalpp-macos.zip
        asset_content_type: application/zip
    # upload ropen linux binaries
    - name: upload-ropen-deb
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/ropen.deb/ropen.deb
        asset_name: ropen.deb
        asset_content_type: application/octet-stream
    - name: upload-ropen-rpm
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/ropen.rpm/ropen.rpm
        asset_name: ropen.rpm
        asset_content_type: application/octet-stream
    - name: upload-ropen-snap
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/ropen.snap/ropen.snap
        asset_name: ropen.snap
        asset_content_type: application/octet-stream
    # upload ropen linux source packages
    - name: upload-ropen-src-rpm
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/ropen.src.rpm/ropen.src.rpm
        asset_name: ropen.src.rpm
        asset_content_type: application/octet-stream
    # upload bypass source and binary
    - name: upload-tpp-bypass
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/tpp-bypass/tpp-bypass
        asset_name: tpp-bypass
        asset_content_type: application/octet-stream
    - name: compress-tpp-bypass-source
      run: |
        cd artifacts
        zip -r tpp-bypass-source.zip tpp-bypass-source
    - name: upload-tpp-bypass-source
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./artifacts/tpp-bypass-source.zip
        asset_name: tpp-bypass-source.zip
        asset_content_type: application/zip

# Automated release to Windows Store
#
# This looks like a good start:
#
# https://github.com/Microsoft/StoreBroker

  release-windows-store:
    if: ${{ github.ref == 'refs/heads/release' }}
    runs-on: windows-latest
    needs: [create-release]
    steps:
    - name: setup
      run: |
        Install-Module StoreBroker -Force
        Import-Module StoreBroker
    # get the msix
    - name: get-terminalpp-msix
      uses: actions/download-artifact@v2
      with:
        name: terminalpp.msix
    # show what we have inside 
    - name: create-store-package
      run: |
          Compress-Archive terminalpp.msix terminalpp.zip
    # do the submission
    - name: 
      run: |
          # login with the StoreBroker
          $password = ConvertTo-SecureString "${{ secrets.WINDOWS_STORE_KEY }}" -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ("${{ secrets.WINDOWS_STORE_CLIENT_ID }}", $password)
          Set-StoreBrokerAuthentication -TenantId ${{ secrets.WINDOWS_STORE_TENANT_ID }} -Credential $cred      
          # create the submission and add new package
          $sub = New-ApplicationSubmission -AppId 9NNH6JQFJ7HD -Force
          $sub.applicationPackages | ForEach-Object { $_.fileStatus = "PendingDelete" }
          $pkg = $sub.applicationPackages[0].PSObject.Copy()
          $pkg.fileName = "terminalpp.msix"
          $pkg.fileStatus = "PendingUpload"
          $pkg.PSObject.Properties.Remove("version")
          $pkg.PSObject.Properties.Remove("id")
          $sub.applicationPackages += $pkg
          Set-ApplicationSubmission -AppId 9NNH6JQFJ7HD -UpdatedSubmission $sub
          Set-SubmissionPackage -PackagePath 'terminalpp.zip' -UploadUrl ($sub.fileUploadUrl)
          Complete-ApplicationSubmission -AppId 9NNH6JQFJ7HD -SubmissionId ($sub.id)

# Release to snap store
# 
  release-snap-edge:
    if: ${{ github.ref == 'refs/heads/release' }}
    runs-on: ubuntu-20.04
    needs: [create-release]
    steps:
    - uses: actions/checkout@v2
    - name: install-snapcraft
      run: |
        sudo snap install snapcraft --classic
        echo "${{ secrets.SNAPCRAFT }}" > snapcraft-credentials
        snapcraft login --with snapcraft-credentials
        rm snapcraft-credentials
    # release terminalpp
    - name: get-terminalpp-snap
      uses: actions/download-artifact@v2
      with:
        name: terminalpp.snap
    - name: release-snap-terminalpp
      run: |
        snapcraft upload --release=edge terminalpp.snap
    # release ropen
    - name: get-ropen-snap
      uses: actions/download-artifact@v2
      with:
        name: ropen.snap
    - name: release-snap-ropen
      run: |
        snapcraft upload --release=edge ropen.snap
